<?xml version="1.0"?>
<!--
  FH-Joanneum SWD12 practical software engeneering project.
  Maven build file.
-->
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" 
          xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  
  <modelVersion>4.0.0</modelVersion>
  <groupId>at.fhj.swd</groupId>
  <artifactId>fhj-ws2014-sd12-pse</artifactId>
  <version>1.3</version>
  <packaging>war</packaging>
  <name>SWD12 PSE Project</name>
  <url>https://code.google.com/p/fhj-ws2014-sd12-pse</url>
  <description>
  	FH-Joanneum SWD12 practical software engeneering project.
  	
  	Authors: Students SWD12 FH-Joanneum Kapfernberg
		Supervisors: Christian Krenn, Egon Teiniker
  </description>
  
  <organization>
		<name>FH-Joanneum</name>
		<url>http://www.fh-joanneum.at/</url>
	</organization>
  
  <!-- TODO: Choose a license! -->
  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <distribution>repo</distribution>
      <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
    </license>
  </licenses>
  
  <issueManagement>
		<system>Google Code</system>
		<url>https://code.google.com/p/fhj-ws2014-sd12-pse/issues/list</url>
	</issueManagement>
  
  <properties>
  
    <!-- 
      Explicitly declaring the source encoding eliminates the following message: 
      [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, 
      i.e. build is platform dependent! 
    -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    
    <!-- 
    	Wildfly home directory and configuration.
    	Currently the properties from maven settings.xml file are used. 
    -->
    <!--
    <wildfly-home>${env.JBOSS_HOME}</wildfly-home>
		<wildfly-hostname>127.0.0.1</wildfly-hostname>
		<wildfly-port>9990</wildfly-port>
		<wildfly-username>swd12</wildfly-username>
		<wildfly-password>fhj</wildfly-password>
		-->
    
    <!-- Skip tests for first deploy to enable selenium test on deployed application. -->
    <skipTests>true</skipTests>
    
    <!-- Jacoco code coverage minimum for successful build -->
    <!-- TODO: Increase! -->
    <coveredRatio>0.05</coveredRatio>
    
    <!-- Enable/disable the CPD report. -->
    <maven.pmd.cpd.enable>true</maven.pmd.cpd.enable>
    
    <!-- Properties for all used dependency versions. -->
    
    <!-- Define the version of the JBoss - Wildfly BOMs we want to import to specify tested stacks. --> 
    <version.jboss.bom>1.0.0.Final</version.jboss.bom>
    <version.wildfly.bom>8.1.0.Final</version.wildfly.bom>    
    
    <!-- Plugin versions -->
    <version.war.plugin>2.1.1</version.war.plugin>
    <version.wildfly.plugin>1.0.2.Final</version.wildfly.plugin>
    <version.compiler.plugin>3.1</version.compiler.plugin>
    <version.surefire.plugin>2.9</version.surefire.plugin>
    <version.failsafe.plugin>2.16</version.failsafe.plugin>
    <version.jacoco.plugin>0.7.2.201409121644</version.jacoco.plugin>
    <version.javadoc.plugin>2.10.1</version.javadoc.plugin>
    <version.findbugs.plugin>3.0.0</version.findbugs.plugin>
    <version.site.plugin>3.3</version.site.plugin>
    <version.inforeports.plugin>2.6</version.inforeports.plugin> 
    <version.surefirereport.plugin>2.18.1</version.surefirereport.plugin>
    <version.javancss.plugin>2.1</version.javancss.plugin>
    <version.pmd.plugin>3.3</version.pmd.plugin>
    <version.statscm.plugin>1.2.0</version.statscm.plugin>   
    
    <!-- Maven compiler plugin -->
    <maven.compiler.target>1.7</maven.compiler.target>
    <maven.compiler.source>1.7</maven.compiler.source>
    
    <!-- Dependency versions not covered by BOM -->
    <version.jsf>2.1.29.Final</version.jsf>    
    <version.junit>4.11</version.junit> 
    <version.ejb-client>2.0.1.Final</version.ejb-client>
    <version.xnio-api>3.3.0.Final</version.xnio-api>
    <version.xnio-nio>3.3.0.Final</version.xnio-nio>
    <version.jboss-remoting>4.0.3.Final</version.jboss-remoting>
    <version.jboss-sasl>1.0.4.Final</version.jboss-sasl>
    <version.jboss-marshalling-river>1.4.9.Final</version.jboss-marshalling-river>
    <version.primefaces>5.1</version.primefaces>
    <version.picketbox>4.0.19.Final</version.picketbox>
    <version.log4j>1.2.17</version.log4j> 
    <version.selenium>2.44.0</version.selenium>
    <version.weld-se>2.1.0.CR1</version.weld-se> 
    <version.mockito>1.9.5</version.mockito>    
    
  </properties>
  
  <!-- TODO: Wrong scm settings! -->
  <scm>
    <connection>scm:svn:http://fhj-ws2014-sd12-pse.googlecode.com/svn/trunk/fhj-ws2014-sd12-pse</connection>
    <developerConnection>scm:svn:https://fhj-ws2014-sd12-pse.googlecode.com/svn/trunk/fhj-ws2014-sd12-pse</developerConnection>
    <tag>HEAD</tag>
    <url>http://fhj-ws2014-sd12-pse.googlecode.com/svn/trunk/fhj-ws2014-sd12-pse</url>
  </scm>
  
  <!-- Set the JBoss reporsitory to get matching dependencies. -->
  <repositories>
    <repository>
      <id>JBoss Repository</id>
      <url>https://repository.jboss.org/nexus/content/groups/public/</url>
    </repository>
    
   	<repository>
			<id>primefaces-repository</id>
			<name>Primefaces repository</name>
			<url>http://repository.primefaces.org</url>
		</repository>
  </repositories>
  
  <dependencyManagement>
    <dependencies>
    
      <!-- 
        JBoss distributes a complete set of Java EE 7 APIs including 
        a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or 
        a collection) of artifacts. We use this here so that we always get the correct 
        versions of artifacts. Here we use the jboss-javaee-7.0-with-hibernate stack. 
      -->
            
      <!-- Hybernate included BOM. -->      
      <dependency>
        <groupId>org.wildfly.bom</groupId>
        <artifactId>jboss-javaee-7.0-with-hibernate</artifactId>
        <version>${version.wildfly.bom}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      
    </dependencies>
  </dependencyManagement>
  
  <!-- Note: Provided scope is used because the dependency is included in JBoss. -->
  <dependencies>
		  
    <!-- BOM dependencies need no version declaration. -->
    
		<!-- Import the CDI API. -->
    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Import the common annotations API (JSR-250). -->
    <dependency>
      <groupId>org.jboss.spec.javax.annotation</groupId>
      <artifactId>jboss-annotations-api_1.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <!-- Import the servlet API. -->
    <dependency> 
      <groupId>org.jboss.spec.javax.servlet</groupId> 
      <artifactId>jboss-servlet-api_3.1_spec</artifactId> 
      <scope>provided</scope> 
    </dependency>
    
    <dependency>
      <groupId>org.jboss.spec.javax.ejb</groupId>
      <artifactId>jboss-ejb-api_3.2_spec</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>org.hibernate.javax.persistence</groupId>
      <artifactId>hibernate-jpa-2.1-api</artifactId>
      <scope>provided</scope>
    </dependency>
    
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <scope>provided</scope>
    </dependency>        

    <!-- JSR-303 (Bean Validation) implementation provides portable constraints such as @Email. -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Dependencies which need a version because they are not handeled by the BOM. -->
    
    <dependency>
			<groupId>org.jboss</groupId>
			<artifactId>jboss-ejb-client</artifactId>
			<scope>runtime</scope>
			<version>${version.ejb-client}</version>
		</dependency>
		
		<dependency>
			<groupId>org.jboss.xnio</groupId>
			<artifactId>xnio-api</artifactId>
			<scope>runtime</scope>
			<version>${version.xnio-api}</version>
		</dependency>
		
		<dependency>
			<groupId>org.jboss.xnio</groupId>
			<artifactId>xnio-nio</artifactId>
			<scope>runtime</scope>
			<version>${version.xnio-nio}</version>
		</dependency>

		<dependency>
			<groupId>org.jboss.remoting</groupId>
			<artifactId>jboss-remoting</artifactId>
			<scope>runtime</scope>
			<version>${version.jboss-remoting}</version>
		</dependency>

		<dependency>
			<groupId>org.jboss.sasl</groupId>
			<artifactId>jboss-sasl</artifactId>
			<scope>runtime</scope>
			<version>${version.jboss-sasl}</version>
		</dependency>

		<dependency>
			<groupId>org.jboss.marshalling</groupId>
			<artifactId>jboss-marshalling-river</artifactId>
			<scope>runtime</scope>
			<version>${version.jboss-marshalling-river}</version>
		</dependency>
    
    <dependency>
      <groupId>org.jboss.spec.javax.faces</groupId>
      <artifactId>jboss-jsf-api_2.1_spec</artifactId>
      <version>${version.jsf}</version>
    </dependency>
    
	 	<!-- Primefaces -->
		<dependency>
			<groupId>org.primefaces</groupId>
			<artifactId>primefaces</artifactId>
			<version>${version.primefaces}</version>
		</dependency>
		
		<!-- Jboss security called picketbox. -->
		<dependency>
		  <groupId>org.picketbox</groupId>
		  <artifactId>picketbox</artifactId>
		  <version>${version.picketbox}</version>
		</dependency>
		
		<!-- LOG4J Logging Framework -->
    <dependency>
	 		<groupId>log4j</groupId>
	 		<artifactId>log4j</artifactId>
	 		<version>${version.log4j}</version>
	  </dependency>
		
		<!-- Dependencies for tests. -->
		
		<dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${version.junit}</version>
      <scope>test</scope>
    </dependency>
		
		<!-- Selenium -->
 		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>${version.selenium}</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.jboss.weld.se</groupId>
			<artifactId>weld-se</artifactId>
			<version>${version.weld-se}</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>${version.mockito}</version>
			<scope>test</scope>
		</dependency>
		
  </dependencies>
  
  <build>
  
    <!-- Maven will append the version to the finalName. -->
    <finalName>${project.artifactId}</finalName>
    
    <plugins>
    
    	<plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>${version.war.plugin}</version>
        <configuration>
        	<!-- Java EE 7 doesn't require web.xml, maven needs to catch up! -->
        	<webXml>src\main\webapp\WEB-INF\web.xml</webXml>
          <!--<failOnMissingWebXml>false</failOnMissingWebXml>-->
        </configuration>
      </plugin>
      
      <!-- 
        The JBoss AS plugin deploys your war to a local JBoss EAP container.
        To use, set the JBOSS_HOME environment variable and run: 
        mvn package wildfly:deploy 
      -->
      <plugin>
        <groupId>org.wildfly.plugins</groupId>
        <artifactId>wildfly-maven-plugin</artifactId>
        <version>${version.wildfly.plugin}</version>
        
        <!-- Further configurations are made by cli files. -->
        <configuration>
        	<jbossHome>${wildfly-home}</jbossHome>
          <hostname>${wildfly-hostname}</hostname>
          <port>${wildfly-port}</port>
          <username>${wildfly-username}</username>
          <password>${wildfly-password}</password>
          <!-- In case you want to use a custom server configuration define it here. -->
          <server-config>standalone.xml</server-config>
        </configuration>
        
        <executions>
        
	        <!-- Run wildfly and deploy application for selenium integration tests. -->
	        <execution>
            <id>wildfly-run</id>
            <phase>pre-integration-test</phase>
            <goals>
             	<goal>start</goal>
             	<goal>deploy</goal>
            </goals>
	        </execution>
	        
	        <!-- Integration test teardown. -->
	        <execution>
            <id>wildfly-shutdown</id>
            <phase>post-integration-test</phase>
            <goals>
            	<goal>undeploy</goal>
            	<goal>shutdown</goal>
            </goals>
	        </execution>
        
          <!-- 
	          H2 Datasource configuration example for goal "add-resource".
	          See: https://docs.jboss.org/wildfly/plugins/maven/latest/examples/add-resource-example.html
	          for further informations. 
	        -->
	        <!--
          <execution>
            <id>add-datasource</id>
            <phase>package</phase>
            <goals>
              <goal>add-resource</goal>
            </goals>
            <configuration>
              <address>subsystem=datasources,data-source=java:jboss/myDs</address>
              <resources>
                <resource>
                  <properties>
                    <jndi-name>java:jboss/myDs</jndi-name>
                    <enabled>true</enabled>
                    <connection-url>jdbc:h2:mem:test;DB_CLOSE_DELAY=-1</connection-url>
                    <driver-class>org.h2.Driver</driver-class>
                    <driver-name>h2</driver-name>
                    <user-name>sa</user-name>
                    <password>sa</password>
                  </properties>
                </resource>
              </resources>
            </configuration>
          </execution>
          -->
          
        </executions>   
                
      </plugin>
      
      <!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${version.compiler.plugin}</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
      
      <plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${version.surefire.plugin}</version>
				<configuration>
					<skipTests>${skipTests}</skipTests>
					<testFailureIgnore>true</testFailureIgnore>
					<!-- Needed to proper run jacoco plugin. -->
					<argLine>${argLine}</argLine>
					<!-- Exclude selenium tests to run them wih integration tests. -->
					<excludes>
            <exclude>**/selenium/*Test.java</exclude>
          </excludes>
				</configuration>
				<executions>
					<execution>
						<id>default-test</id>
						<phase>test</phase>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
					<!-- Execute selenium tests. -->
					<execution>
            <id>integration-test</id>
            <phase>integration-test</phase>
            <goals>
              <goal>test</goal>
            </goals>
            <configuration>
              <skip>false</skip>
              <excludes>
                <exclude>none</exclude>
              </excludes>
              <includes>
                <include>**/selenium/*Test.java</include>
              </includes>
            </configuration>
          </execution>
				</executions>
			</plugin>
      
      <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${version.failsafe.plugin}</version>
				<executions>
					<execution>
						<id>default-integration-test</id>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			
			<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>${version.site.plugin}</version>
        <executions>
        	<!-- Maven install should launch site creation. -->
        	<execution>
						<id>default-site</id>
						<phase>install</phase>
						<goals>
							<goal>site</goal>
						</goals>
					</execution>
				</executions>
      </plugin>
			
	    <!-- 
	    	The JaCoCo Maven plug-in needs to be in build as well to initialize and check build success
	    	depending on coveredRatio property. Report is done by maven site plugin in reporting section. 
	    -->
	    <plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${version.jacoco.plugin}</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>COMPLEXITY</counter>
											<value>COVEREDRATIO</value>
											<minimum>${coveredRatio}</minimum>wildfly-home
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
    
    </plugins>
    
  </build>
  
  <!-- Reporting contains the elements that correspond specifically for the site generation phase. -->
  <reporting>
  
  	<excludeDefaults>true</excludeDefaults>
  	
		<plugins>
		
			<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>${version.inforeports.plugin}</version>
      </plugin>
			
			<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>${version.surefirereport.plugin}</version>
      </plugin>
			
			<!-- 
	    	The JaCoCo Maven plug-in provides the JaCoCo runtime agent to your tests and allows basic 
	    	report creation. See http://www.eclemma.org/jacoco/trunk/doc/maven.html for documentation. 
	    -->
			<plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${version.jacoco.plugin}</version>
      </plugin>
			
			<!-- 
				Generate FindBugs Report As Part of the Project Reports. 
				See http://mojo.codehaus.org/findbugs-maven-plugin-3.0.0/usage.html	for documentation. 
			-->
			<plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <version>${version.findbugs.plugin}</version>
      </plugin>
      
      <!-- 
      	JavaNCSS is a source measurement suite for Java which produces quantity & complexity 
      	metrics for your java source code.
      	See http://mojo.codehaus.org/javancss-maven-plugin/index.html	for documentation.
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>javancss-maven-plugin</artifactId>
        <version>${version.javancss.plugin}</version>
      </plugin>
      
      <!--
      	The PMD plugin generates PMD and CPD reports using the PMD code analysis tool.
      	See http://maven.apache.org/plugins/maven-pmd-plugin/index.html	for documentation.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>${version.pmd.plugin}</version>
      </plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${version.javadoc.plugin}</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<failOnError>false</failOnError>
					<linksource>true</linksource>
				</configuration>
				<reportSets>
					<reportSet>
						<id>default</id>
						<reports>
							<report>javadoc</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
					
			<!-- Generates Source Code Management Metrics Reports as part of the mvn site command. -->
			<plugin>
				<groupId>net.sf</groupId>
				<artifactId>stat-scm</artifactId>
				<version>${version.statscm.plugin}</version>
			</plugin>
			
		</plugins>
	</reporting>

</project>